{"version":3,"sources":["components/Weather.js","components/SearchForm.js","App.js","apis/config.js","reportWebVitals.js","index.js"],"names":["CloseButton","styled","button","Weather","props","min","max","city","country","icon","temp","temp_max","temp_min","feels_like","description","Container","fluid","Row","className","Col","xs","lg","Card","Body","type","aria-label","aria-hidden","onClick","onCloseForm","toUpperCase","error","Alert","variant","SearchForm","useState","undefined","setCity","setCountry","Form","inline","onSubmit","e","preventDefault","getWeather","Control","name","value","autoComplete","onChange","event","target","placeholder","Button","App","handleData","data","console","log","cod","setState","sys","calCelsius","main","weatherIcon","Thunderstorm","weather","show","getWeatherIcon","id","a","fetch","then","response","json","catch","Math","round","icons","rangeId","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","state","nextProps","nextState","nextContext","this","style","backgroundImage","process","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9e6aa4a.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card, Row, Col, Container} from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nconst CloseButton = styled.button`\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n    font-size: 40px;\r\n`\r\nconst Weather = (props) => {\r\n    const {city, country, icon, temp, temp_max, temp_min, feels_like, description} = props;\r\n    const minMaxTemp = (min, max) => {\r\n        return (\r\n            <h3>\r\n                <span className=\"px-4\">Max Celsius: {min}&deg;</span>\r\n                <span className=\"px-4\">Min Celsius: {max}&deg;</span>\r\n            </h3>\r\n        )\r\n    }\r\n    const closeForm = () => {\r\n        props.onCloseForm();\r\n    }\r\n    return (\r\n         <Container fluid>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col xs={6} lg={6}>\r\n                    <Card>\r\n                        <Card.Body className=\"cards\">\r\n                            <Row className=\"d-flex justify-content-center\">\r\n                                <h1>{city}, {country}</h1>\r\n                                <CloseButton type=\"button\" className=\"close\" aria-label=\"Close\">\r\n                                    <span aria-hidden=\"true\" onClick={closeForm}>&times;</span>\r\n                                </CloseButton>\r\n                            </Row>\r\n                            <h5 className=\"py-4\">\r\n                                <i className={`wi ${icon} display-1`}/>\r\n                            </h5>\r\n                            <h1 className=\"py-2\">\r\n                                {temp}&deg;\r\n                            </h1>\r\n                            {minMaxTemp(temp_min, temp_max)}\r\n                            <h3>\r\n                                <span className=\"px-4\">Feel Like: {feels_like}&deg;</span>\r\n                            </h3>\r\n                            <h4 className=\"py-3\">{description.toUpperCase()}</h4>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\nexport default Weather;","import {Form, Button, Row, Col, Alert} from 'react-bootstrap';\r\nimport {useState} from \"react\";\r\nimport './SearchForm.css'\r\n\r\nconst SearchForm = (props) => {\r\n    const [city, setCity] = useState(undefined);\r\n    const [country, setCountry] = useState(undefined);\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        props.getWeather(city, country);\r\n    }\r\n    return (\r\n        <>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Form inline onSubmit={handleSubmit}>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Control type=\"text\" className=\"form-control\" name=\"city\" value={city}\r\n                                          autoComplete=\"off\"\r\n                                          onChange={event => setCity(event.target.value)} placeholder=\"City\"/>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Control type=\"text\" className=\"form-control\" name=\"country\" value={country}\r\n                                          autoComplete=\"off\"\r\n                                          onChange={event => setCountry(event.target.value)} placeholder=\"Country\"/>\r\n                        </Col>\r\n                    </Row>\r\n                    <Button variant=\"warning\" type=\"submit\" className=\"m-3\">\r\n                        Get Weather\r\n                    </Button>\r\n                </Form>\r\n            </Row>\r\n            <Row className=\"justify-content-md-center mt-3\">\r\n                <div>{props.error ? error() : \"\"}</div>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\nconst error = () => {\r\n    return (\r\n        <Alert variant=\"warning\" className=\"mx-5\">\r\n            Please Enter City and Country...!\r\n        </Alert>\r\n    )\r\n}\r\nexport default SearchForm;","import './App.css';\nimport Weather from \"./components/Weather\";\nimport {WEATHER_APT_KEY, WEATHER_BASE_URL} from \"./apis/config\";\nimport {Component} from \"react\";\nimport SearchForm from './components/SearchForm';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            city: undefined,\n            country: undefined,\n            icon: undefined,\n            main: undefined,\n            temp: undefined,\n            temp_max: null,\n            temp_min: null,\n            feels_like: null,\n            description: \"\",\n            error: false,\n            show: false,\n        }\n        this.weatherIcon = {\n            Thunderstorm: \"wi-thunderstorm\",\n            Drizzle: \"wi-sleet\",\n            Rain: \"wi-storm-showers\",\n            Snow: \"wi-snow\",\n            Atmosphere: \"wi-fog\",\n            Clear: \"wi-day-sunny\",\n            Clouds: \"wi-cloudy\",\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const {city, country, icon, temp, temp_max, temp_min, feels_like, description, error} = this.state;\n        if (this.state !== nextState) {\n            return (\n                <Weather city={city} country={country} icon={icon} temp={temp} temp_max={temp_max} temp_min={temp_min}\n                         feels_like={feels_like}\n                         description={description}/>\n            )\n        }\n    }\n\n    handleData = (data) => {\n        console.log(data);\n        if (data.cod === 200) {\n            this.setState({\n                city: data.name,\n                country: data.sys.country,\n                temp: this.calCelsius(data.main.temp),\n                temp_max: this.calCelsius(data.main.temp_max),\n                temp_min: this.calCelsius(data.main.temp_min),\n                feels_like: this.calCelsius(data.main.feels_like),\n                icon: this.weatherIcon.Thunderstorm,\n                description: data.weather[0].description,\n                error: false,\n                show: true,\n            })\n        } else {\n            this.setState({error: true})\n        }\n        this.getWeatherIcon(this.weatherIcon, data.weather[0].id);\n    }\n    getWeather = async (city, country) => {\n        await fetch(`${WEATHER_BASE_URL}?q=${city},${country}&appid=${WEATHER_APT_KEY}`)\n            .then((response) => response.json())\n            .then((data) => this.handleData(data))\n            .catch((error) => console.error(error));\n    }\n\n    calCelsius = (temp) => {\n        return Math.round((temp - 273.15) * 100) / 100;\n    }\n\n    getWeatherIcon = (icons, rangeId) => {\n        switch (true) {\n            case rangeId >= 200 && rangeId <= 232: {\n                this.setState({icon: this.weatherIcon.Thunderstorm});\n                break;\n            }\n            case rangeId >= 300 && rangeId <= 321: {\n                this.setState({icon: this.weatherIcon.Drizzle});\n                break;\n            }\n            case rangeId >= 500 && rangeId <= 531: {\n                this.setState({icon: this.weatherIcon.Rain});\n                break;\n            }\n            case rangeId >= 600 && rangeId <= 622: {\n                this.setState({icon: this.weatherIcon.Snow});\n                break;\n            }\n            case rangeId >= 701 && rangeId <= 781: {\n                this.setState({icon: this.weatherIcon.Atmosphere});\n                break;\n            }\n            case rangeId === 800: {\n                this.setState({icon: this.weatherIcon.Clear});\n                break;\n            }\n            case rangeId >= 801 && rangeId <= 804: {\n                this.setState({icon: this.weatherIcon.Clouds});\n                break;\n            }\n            default:\n                break;\n        }\n    }\n    onCloseForm = () => {\n        this.setState({\n            show: false,\n        })\n    }\n\n    render() {\n        const {city, country, icon, temp, temp_max, temp_min, feels_like, description, error} = this.state;\n        return (\n            <div className=\"App\"\n                 style={{backgroundImage: `url(${process.env.PUBLIC_URL}/assests/image/background.jpg)`}}>\n                <SearchForm getWeather={this.getWeather} error={error}/>\n                {this.state.show ? <Weather city={city} country={country} icon={icon} temp={temp} temp_max={temp_max}\n                                            temp_min={temp_min}\n                                            feels_like={feels_like}\n                                            description={description} onCloseForm={this.onCloseForm}/> : \"\"}\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","export const WEATHER_APT_KEY = '2be13fe1810219cf2691c4ca337535c7';\r\nexport const WEATHER_BASE_URL = 'https://api.openweathermap.org/data/2.5/weather';","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}